#include <iostream>
using namespace std;

class Stack {
  int n, tempData;
  
  struct stackNode {
    int data;
    stackNode *next;
    stackNode() {
      next = NULL;
    }
  };
  
  stackNode *top;  //stackNode pointer, points to the first node of the stack list
  
  public:
    Stack(){  //Default constructor, initializing the top to NULL, since when instantiating the object, stack list is empty
      top = NULL;
    }
    
    
    int isEmpty() { // Will return 1 (true) if the stack is empty, otherwise 0 (false).
      if (top == NULL) 
        return 1;
      else 
        return 0;      
    }
    
    
    void push(int pushData) {
      stackNode *newNode;
      newNode = new stackNode;  // Dynamically allocating memory for new node of the stack
      
      newNode -> data = pushData;
      newNode -> next = top;  // Adding the node at the beginning of the stack list
      top = newNode ;  // changing the top to point to the first value in the stack list
    }// End of push function
    
    
    int pop() { // Removing a node from stack list from the beginning
      stackNode *temp = top; // Initializing a temporary node pointer to point to first node (top)
      top = top -> next; // changing the top to point to the next node in the list
      tempData = temp -> data;  // Storing the data to be popped in a variable
      delete temp; // Deleting the dynamically allocated memory pointing to the node to be popped
      return tempData;  // Returning data in the node to be popped for further use
    }// End of pop function
    
    
    void display() { 
      stackNode *temp = top;
      while (temp != NULL) {  // Parsing through the list till the temp node points to the last node
        cout<<temp -> data<<" | ";
        temp = temp -> next;
      } // End of while
    }// End of display function
}; // End of class defination


int main() {
  Stack S;  // Instantiating object S of class Stack
  int i, choice, p;


  do {
    cout<<"\n1.Push\n2.Pop\n3.Display\n4.Exit\nEnter your choice : ";
    cin>>choice;
    
    
    switch(choice) {
      case 1: // Push
          cout<<"\nEnter the element to be pushed to the stack : ";
          cin>>i;
          S.push(i);  
        break;
        
        
      case 2: // Pop
        if (S.isEmpty()) // isEmpty() returns 1 if the stack is empty
          cout<<"\nCannot POP. Stack is empty\n";
        else
          p = S.pop();
          cout<<"\nElement popped is "<<p<<"\n";
        break;
        
        
      case 3: // Displaying the current contents of the stack without changing the stack values
        cout<<"\n";
        S.display();
        cout<<"\n";
        break;
        
        
      case 4:
        cout<<"\nProgram End\n";
        break;
      }
    } while(choice != 4);
} // End of main function

